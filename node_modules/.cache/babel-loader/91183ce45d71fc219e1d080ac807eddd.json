{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Phoen\\\\Desktop\\\\Thinkful\\\\qualified-challenges\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusDuration from \"./FocusDuration\";\nimport BreakDuration from \"./BreakDuration\";\nimport PlayStopButton from \"./PlayStopButton\";\nimport TimeRemaining from \"./TimeRemaining\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const initClockTimes = {\n    focusSetting: 10,\n    breakSetting: 5 * 60,\n    focusRemaining: 10,\n    breakRemaining: 5 * 60,\n    focus: true,\n    isSessionActive: false\n  };\n  const [clockTimes, setClockTimes] = useState(initClockTimes); // focus duration X\n  // break duration X\n  // play/stop X\n  // time remaining X\n  // progress bar X\n  // when the session is active, the Duration components should be disabled X\n  // when the session is inactive, the Stop button should be disabled X\n  // when the session is inactive, the entire TimeRemaining and ProgressBar should be hidden X\n  // when the session is active and the pause button is pressed, it displays the word \"PAUSED\"\n\n  useInterval( // is called every second if isTimerRunning is truthy\n  () => {\n    // ToDo: Implement what should happen when the timer is running\n    async function handleSecondPassed() {\n      const mode = clockTimes.focus ? \"focusRemaining\" : \"breakRemaining\";\n      await setClockTimes({ ...clockTimes,\n        [mode]: clockTimes[mode] - 1\n      });\n\n      if (clockTimes[mode] === 0) {\n        setClockTimes({ ...clockTimes,\n          focus: !clockTimes.focus,\n          [mode]: clockTimes[clockTimes.focus ? \"focusSetting\" : \"breakSetting\"]\n        });\n      }\n    }\n\n    handleSecondPassed();\n  }, isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    setIsTimerRunning(prevState => !prevState);\n    setClockTimes({ ...clockTimes,\n      isSessionActive: true\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FocusDuration, {\n    clockTimes: clockTimes,\n    setClockTimes: setClockTimes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BreakDuration, {\n    clockTimes: clockTimes,\n    setClockTimes: setClockTimes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(PlayStopButton, {\n    isTimerRunning: isTimerRunning,\n    playPause: playPause,\n    setIsTimerRunning: setIsTimerRunning,\n    clockTimes: clockTimes,\n    setClockTimes: setClockTimes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TimeRemaining, {\n    clockTimes: clockTimes,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ProgressBar, {\n    clockTimes: clockTimes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/Phoen/Desktop/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","FocusDuration","BreakDuration","PlayStopButton","TimeRemaining","ProgressBar","Pomodoro","isTimerRunning","setIsTimerRunning","initClockTimes","focusSetting","breakSetting","focusRemaining","breakRemaining","focus","isSessionActive","clockTimes","setClockTimes","handleSecondPassed","mode","playPause","prevState"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusDuration from \"./FocusDuration\";\nimport BreakDuration from \"./BreakDuration\";\nimport PlayStopButton from \"./PlayStopButton\";\nimport TimeRemaining from \"./TimeRemaining\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n\n  const initClockTimes = {\n    focusSetting: 10,\n    breakSetting: 5 * 60,\n    focusRemaining: 10,\n    breakRemaining: 5 * 60,\n    focus: true,\n    isSessionActive: false,\n  }\n\n  const [clockTimes, setClockTimes] = useState(initClockTimes);\n\n  // focus duration X\n  // break duration X\n  // play/stop X\n  // time remaining X\n  // progress bar X\n\n  // when the session is active, the Duration components should be disabled X\n  // when the session is inactive, the Stop button should be disabled X\n  // when the session is inactive, the entire TimeRemaining and ProgressBar should be hidden X\n  // when the session is active and the pause button is pressed, it displays the word \"PAUSED\"\n\n  useInterval( // is called every second if isTimerRunning is truthy\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n      async function handleSecondPassed() {\n        const mode = clockTimes.focus ? \"focusRemaining\" : \"breakRemaining\";\n  \n        await setClockTimes({\n          ...clockTimes,\n          [mode]: clockTimes[mode] - 1,\n        });\n\n        if(clockTimes[mode] === 0) {\n          setClockTimes({\n            ...clockTimes,\n            focus: !clockTimes.focus,\n            [mode]: clockTimes[clockTimes.focus ? \"focusSetting\" : \"breakSetting\"],\n          });\n        }\n      }\n      \n      handleSecondPassed();\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n    setClockTimes({\n      ...clockTimes,\n      isSessionActive: true,\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <FocusDuration clockTimes={clockTimes} setClockTimes={setClockTimes} />\n        <BreakDuration clockTimes={clockTimes} setClockTimes={setClockTimes} />\n      </div>\n\n      <PlayStopButton\n          isTimerRunning={isTimerRunning}\n          playPause={playPause} \n          setIsTimerRunning={setIsTimerRunning}\n          clockTimes={clockTimes}\n          setClockTimes={setClockTimes}\n      />\n\n      <div>\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n        <TimeRemaining clockTimes={clockTimes} isTimerRunning ={isTimerRunning} />\n\n        <ProgressBar clockTimes={clockTimes} />\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}