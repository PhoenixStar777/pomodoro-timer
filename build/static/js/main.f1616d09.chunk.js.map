{"version":3,"sources":["utils/duration/index.js","pomodoro/FocusDuration.js","pomodoro/BreakDuration.js","pomodoro/PlayStopButton.js","utils/class-names/index.js","pomodoro/TimeRemaining.js","pomodoro/ProgressBar.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["secondsToDuration","givenSeconds","minutes","Math","floor","toString","padStart","seconds","round","FocusDuration","clockTimes","setClockTimes","handleFocusChange","event","focusChange","target","id","focusSetting","focusRemaining","className","data-testid","type","onClick","disabled","isSessionActive","BreakDuration","handleBreakChange","breakChange","breakSetting","breakRemaining","PlayStopButton","classNameToBoolean","isTimerRunning","playPause","setIsTimerRunning","role","aria-label","title","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","focus","TimeRemaining","ProgressBar","percent","mode","style","height","aria-valuemin","aria-valuemax","aria-valuenow","width","Pomodoro","useState","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useInterval","prevState","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1616d09.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from \"react\";\r\nimport { secondsToDuration } from \"../utils/duration/index\";\r\n\r\nconst FocusDuration = ({ clockTimes, setClockTimes }) => {\r\n    const handleFocusChange = (event) => {\r\n        // check to see whether the plus or minus button was pressed\r\n        let focusChange = (event.target.id === \"decrease-focus\") ? 0 - (5 * 60) : (5 * 60);\r\n\r\n        // max bound: 60 min * 60 sec\r\n        if (clockTimes.focusSetting + focusChange > 60 * 60) {\r\n            focusChange = 0;\r\n        }\r\n        // min bound: 5 min * 60 sec\r\n        else if (clockTimes.focusSetting + focusChange < 5 * 60) {\r\n            focusChange = 0;\r\n        }\r\n\r\n        // change the focusSetting variable based off of newTime\r\n        setClockTimes({\r\n            ...clockTimes,\r\n            focusSetting: clockTimes.focusSetting + focusChange,\r\n            focusRemaining: clockTimes.focusSetting + focusChange\r\n        });\r\n    };\r\n\r\nreturn (\r\n    <div className=\"col\">\r\n        <div className=\"input-group input-group-lg mb-2\">\r\n            <span className=\"input-group-text\" data-testid=\"duration-focus\">\r\n                {/* DONE: Update this text to display the current focus session duration */}\r\n\t\t\t\t\tFocus Duration: {clockTimes.focusSetting === (60 * 60) ? \"60:00\" : secondsToDuration(clockTimes.focusSetting)}\r\n            </span>\r\n\r\n            <div className=\"input-group-append\">\r\n                {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-secondary\"\r\n                    data-testid=\"decrease-focus\"\r\n                    onClick={handleFocusChange}\r\n                    id=\"decrease-focus\"\r\n                    disabled={clockTimes.isSessionActive}\r\n                >\r\n                    <span className=\"oi oi-minus\" id=\"decrease-focus\" />\r\n                </button>\r\n                {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-secondary\"\r\n                    data-testid=\"increase-focus\"\r\n                    onClick={handleFocusChange}\r\n                    id=\"increase-focus\"\r\n                    disabled={clockTimes.isSessionActive}\r\n                >\r\n                    <span className=\"oi oi-plus\" />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\t);\r\n}\r\n\r\nexport default FocusDuration;","import React from \"react\";\r\nimport { secondsToDuration } from \"../utils/duration/index\";\r\n\r\nconst BreakDuration = ({ clockTimes, setClockTimes }) => {\r\n    const handleBreakChange = (event) => {\r\n        let breakChange = (event.target.id === \"decrease-break\") ? (0 - 60) : 60;\r\n\r\n        // max bound: 15min * 60sec\r\n        if (clockTimes.breakSetting + breakChange > 15 * 60) {\r\n            breakChange = 0;\r\n        }\r\n        //Min Bound: 1 min \r\n        else if (clockTimes.breakSetting + breakChange < 60) {\r\n            breakChange = 0;\r\n        }\r\n\r\n        setClockTimes({\r\n            ...clockTimes,\r\n            breakSetting: clockTimes.breakSetting + breakChange,\r\n            breakRemaining: clockTimes.breakSetting + breakChange,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"col\">\r\n            <div className=\"float-right\">\r\n                <div className=\"input-group input-group-lg mb-2\">\r\n                    <span className=\"input-group-text\" data-testid=\"duration-break\">\r\n                        {/* TODO: Update this text to display the current break session duration */}\r\n              \t\t\t\t\tBreak Duration: {secondsToDuration(clockTimes.breakSetting)}\r\n            \t\t\t\t</span>\r\n                    <div className=\"input-group-append\">\r\n                        {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-secondary\"\r\n                            data-testid=\"decrease-break\"\r\n                            onClick={handleBreakChange}\r\n                            id=\"decrease-break\"\r\n                            disabled={clockTimes.isSessionActive}\r\n                        >\r\n                            <span className=\"oi oi-minus\" id=\"decrease-break\"/>\r\n                        </button>\r\n                        {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-secondary\"\r\n                            data-testid=\"increase-break\"\r\n                            onClick={handleBreakChange}\r\n                            id=\"increase-break\"\r\n                            disabled={clockTimes.isSessionActive}\r\n                        >\r\n                            <span className=\"oi oi-plus\" id=\"increase-break\" />\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    \r\n\r\n        )\r\n\r\n}\r\n\r\nexport default BreakDuration;","import React from \"react\";\r\nimport classNames from \"../utils/class-names\";\r\n\r\nfunction PlayStopButton({isTimerRunning, playPause, setIsTimerRunning, clockTimes, setClockTimes}) {\r\n\r\n    function stopButtonHandler(event) {\r\n\t\t\tsetIsTimerRunning(false);\r\n\t\t\tsetClockTimes({\r\n\t\t\t\t...clockTimes,\r\n\t\t\t\tfocusRemaining: clockTimes.focusSetting,\r\n\t\t\t\tbreakRemaining: clockTimes.breakSetting,\r\n\t\t\t\tfocus: true,\r\n\t\t\t\tisSessionActive: false,\r\n\t\t\t})\r\n\t\t\t\t// if(isTimerRunning)\r\n                //then !isTimerRunning && session end\r\n    }\r\n\r\n return (\r\n\r\n    <div className=\"row\">\r\n        <div className=\"col\">\r\n          <div\r\n            className=\"btn-group btn-group-lg mb-2\"\r\n            role=\"group\"\r\n            aria-label=\"Timer controls\"\r\n          >\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              data-testid=\"play-pause\"\r\n              title=\"Start or pause timer\"\r\n              onClick={playPause}\r\n            >\r\n              <span\r\n                className={classNames({\r\n                  oi: true,\r\n                  \"oi-media-play\": !isTimerRunning,\r\n                  \"oi-media-pause\": isTimerRunning,\r\n                })}\r\n              />\r\n            </button>\r\n            {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              title=\"Stop the session\"\r\n\t\t\t\t\t\t\tonClick={stopButtonHandler}\r\n\t\t\t\t\t\t\tdisabled={!clockTimes.isSessionActive}\r\n            >\r\n              <span className=\"oi oi-media-stop\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n\r\n )\r\n\r\n\r\n}\r\n \r\n\r\nexport default PlayStopButton;","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","import React from \"react\";\r\nimport { secondsToDuration } from \"../utils/duration/index\";\r\n\r\nconst TimeRemaining = ({ clockTimes, isTimerRunning }) => {\r\n\tif(!clockTimes.isSessionActive) {\r\n\t\treturn null;\r\n\t}\r\n\r\n    const getTimerHeading = () => {\r\n        return clockTimes.focus ?\r\n            `Focusing for ${secondsToDuration(clockTimes.focusSetting)} minutes` :\r\n            `On Break for ${secondsToDuration(clockTimes.breakSetting)} minutes`\r\n    }\r\n    const getRemainingHeading = () => {\r\n        return ( \t\t// condition ? true action : false action\r\n            clockTimes.focus ? `${secondsToDuration(clockTimes.focusRemaining)}` :\r\n                `${secondsToDuration(clockTimes.breakRemaining)}`\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"row mb-2\">\r\n            <div className=\"col\">\r\n                {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\r\n                <h2 data-testid=\"session-title\">\r\n                    {getTimerHeading()}\r\n\r\n                </h2>\r\n                {/* TODO: Update message below to include time remaining in the current session */}\r\n                <p className=\"lead\" data-testid=\"session-sub-title\">\r\n\t\t\t\t\t\t\t\t\t{getRemainingHeading()} remaining\r\n                    \r\n            \t\t</p>        {/*return null when something is not to be seen in this case*/ }\r\n\t\t\t\t\t\t\t\t<h3>{clockTimes.isSessionActive && !isTimerRunning ? \"PAUSED\" : null}</h3>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TimeRemaining;","import React from \"react\";\r\n\r\n\r\n\r\nconst ProgressBar = ({ clockTimes }) => {\r\n\tif(!clockTimes.isSessionActive) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tconst percent = () => {\r\n\t\tconst mode = clockTimes.focus ? \"focus\" : \"break\";\r\n\t\treturn 100 - (100 * (clockTimes[`${mode}Remaining`] / clockTimes[`${mode}Setting`]));\r\n        //mode will flip based on the situation [\"breakRemaining\"] & [\"focusRemaining\"]\r\n\t\t// 100 -> 0\r\n\t\t// 0 -> 100\r\n\t\t// 50 -> 50\r\n\t\t// 75 -> 25\r\n\t\t// 25 -> 75\r\n\t\t// 18 -> 82\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"progress\" style={{ height: \"20px\" }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow={percent()} // TODO: Increase aria-valuenow as elapsed time increases\r\n                style={{ width: `${percent()}%` }} // TODO: Increase width % as elapsed time increases\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\t);\r\n}\r\n\r\nexport default ProgressBar;","import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusDuration from \"./FocusDuration\";\nimport BreakDuration from \"./BreakDuration\";\nimport PlayStopButton from \"./PlayStopButton\";\nimport TimeRemaining from \"./TimeRemaining\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n\n  const initClockTimes = {\n    focusSetting: 25 * 60,\n    breakSetting: 5 * 60,\n    focusRemaining: 25 * 60,\n    breakRemaining: 5 * 60,\n    focus: true,\n    isSessionActive: false,\n  }\n  const [clockTimes, setClockTimes] = useState(initClockTimes);\n\n  // focus duration X\n  // break duration X\n  // play/stop X\n  // time remaining X\n  // progress bar X\n\n  // when the session is active, the Duration components should be disabled X\n  // when the session is inactive, the Stop button should be disabled X\n  // when the session is inactive, the entire TimeRemaining and ProgressBar should be hidden X\n  // when the session is active and the pause button is pressed, it displays the word \"PAUSED\"\n\n  useInterval( // is called every second if isTimerRunning is truthy\n    \n      // ToDo: Implement what should happen when the timer is running\n       \n      \n    handleSecondPassed,\n    isTimerRunning ? 1000 : null\n  );\n\n\n  function handleSecondPassed() {\n    const mode = clockTimes.focus ? \"focusRemaining\" : \"breakRemaining\";\n\n       setClockTimes({\n      ...clockTimes,\n      [mode]: clockTimes[mode] - 1,\n    });\n\n    if(clockTimes[mode] === 0) {\n      setClockTimes({\n        ...clockTimes,\n        focus: !clockTimes.focus,\n        [mode]: clockTimes[clockTimes.focus ? \"focusSetting\" : \"breakSetting\"],\n      });\n    }\n  }\n\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n    setClockTimes({\n      ...clockTimes,\n      isSessionActive: true,\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <FocusDuration clockTimes={clockTimes} setClockTimes={setClockTimes} />\n        <BreakDuration clockTimes={clockTimes} setClockTimes={setClockTimes} />\n      </div>\n\n      <PlayStopButton\n          isTimerRunning={isTimerRunning}\n          playPause={playPause} \n          setIsTimerRunning={setIsTimerRunning}\n          clockTimes={clockTimes}\n          setClockTimes={setClockTimes}\n      />\n\n      <div>\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n        <TimeRemaining clockTimes={clockTimes} isTimerRunning={isTimerRunning} />\n\n        <ProgressBar clockTimes={clockTimes} />\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}